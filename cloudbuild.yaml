steps:
  # Cloud Build logs stdout/stderr from each step by default

  # Install root dependencies using Node.js 20
  - name: 'node:20'
    entrypoint: npm
    args: ['ci']
    id: Install root deps
    timeout: 600s


  # Install Firebase Functions dependencies
  - name: 'node:20'
    entrypoint: npm
    args: ['ci', '--prefix', 'functions']
    id: Install functions deps
    timeout: 600s

  # Install frontend packages including Vite
  - name: 'node:20'
    entrypoint: npm
    args: ['ci', '--prefix', 'frontend']
    id: Install frontend deps
    timeout: 600s

  # Validate required tooling is available
  - name: node:20
    entrypoint: bash
    args:
      - -c
      - |
          npx --yes vite --version >/dev/null 2>&1 || { echo "❌ vite not found"; exit 1; }
          npx --yes firebase --version >/dev/null 2>&1 || { echo "❌ firebase-tools not found"; exit 1; }
    id: Validate tooling

  # Fail early if required env vars aren't set
  - name: node:20
    entrypoint: bash
    args:
      - -c
      - |
          : "${FIREBASE_TOKEN:?FIREBASE_TOKEN not set}"
          : "${PROJECT_ID:?PROJECT_ID not set}"
          : "${_SERVICE_NAME:?_SERVICE_NAME not set}"
          : "${_REGION:?_REGION not set}"
    id: Check env

  # Build the frontend with Vite via root script
  - name: 'node:20'
    entrypoint: npm
    args: ['run', 'build']
    id: Build frontend
    timeout: 600s

  # Deploy Firebase functions
  - name: 'node:20'
    entrypoint: bash
    args:
      - -c
      - |
          npm install -g firebase-tools
          if firebase deploy --only functions --token "$FIREBASE_TOKEN" --project "$PROJECT_ID"; then
            echo "✅ Functions deployed"
          else
            echo "❌ Functions deployment failed"
            exit 1
          fi
    id: Deploy functions
    timeout: 1200s

  # Deploy Cloud Run service from container image (no Buildpacks)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - -c
      - |
          if gcloud run deploy "${_SERVICE_NAME}" --image=gcr.io/$PROJECT_ID/${_SERVICE_NAME} --region=${_REGION}; then
            echo "✅ Cloud Run service deployed"
          else
            echo "❌ Cloud Run deployment failed"
            exit 1
          fi
    id: Deploy service

  # Verify health endpoint after deploy and create uptime checks
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - -c
      - |
          curl -f https://$SERVICE_NAME-$REGION.a.run.app/healthz
          gcloud monitoring uptime-checks create http cloud-run-health \
            --http-path=/healthz \
            --display-name="cloud-run-health" \
            --project=$PROJECT_ID \
            --hostname="$SERVICE_NAME-$REGION.a.run.app" || true
          gcloud monitoring uptime-checks create http functions-health \
            --http-path=/healthz \
            --display-name="functions-health" \
            --project=$PROJECT_ID \
            --hostname="$REGION-$PROJECT_ID.cloudfunctions.net" || true
    id: Setup uptime checks

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/firebase-ci-token/versions/latest
      env: FIREBASE_TOKEN

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _SERVICE_NAME: ""
  _REGION: ""

