steps:
  # Cloud Build logs stdout/stderr from each step by default
  # Install root dependencies using Node 20
  - name: 'node:20'
    entrypoint: npm
    args: ['ci']
    id: Install dependencies
    timeout: 600s

  # Install frontend packages and Vite
  - name: 'node:20'
    entrypoint: npm
    args: ['install', '--prefix', 'frontend']
    id: Install frontend packages
    timeout: 600s

  # Validate required tooling
  - name: node:20
    entrypoint: bash
    args:
      - -c
      - |
          if ! command -v vite >/dev/null 2>&1; then
            echo "\u274c vite is not installed. Add it to your devDependencies or install globally."
            exit 1
          fi
          if ! command -v firebase >/dev/null 2>&1; then
            echo "\u274c firebase-tools is not installed. Add it to your devDependencies or install globally."
            exit 1
          fi
    id: Validate tooling

  # Build the frontend with Vite via root script
  - name: 'node:20'
    entrypoint: npm
    args: ['run', 'build']
    id: Build frontend
    timeout: 600s

  # Deploy Firebase functions
  - name: 'node:20'
    entrypoint: bash
    args:
      - -c
      - |
          npm install -g firebase-tools
          firebase deploy --only functions --token "$FIREBASE_TOKEN" --project "$PROJECT_ID"
    id: Deploy functions
    timeout: 1200s

  # Deploy Cloud Run service from container image (no Buildpacks)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - run
      - deploy
      - "$SERVICE_NAME"
      - --image=gcr.io/$PROJECT_ID/$SERVICE_NAME
      - --region=$REGION
    id: Deploy service

  # Verify health endpoint after deploy and create uptime checks
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: bash
    args:
      - -c
      - |
          curl -f https://$SERVICE_NAME-$REGION.a.run.app/healthz
          gcloud monitoring uptime-checks create http cloud-run-health \
            --http-path=/healthz \
            --display-name="cloud-run-health" \
            --project=$PROJECT_ID \
            --hostname="$SERVICE_NAME-$REGION.a.run.app" || true
          gcloud monitoring uptime-checks create http functions-health \
            --http-path=/healthz \
            --display-name="functions-health" \
            --project=$PROJECT_ID \
            --hostname="$REGION-$PROJECT_ID.cloudfunctions.net" || true
    id: Setup uptime checks

  availableSecrets:
    secretManager:
      - versionName: projects/$PROJECT_ID/secrets/firebase-ci-token/versions/latest
        env: FIREBASE_TOKEN
  # FIREBASE_TOKEN must exist in Secret Manager for functions deploys
